# 2. Есть два списка: tutors - имена учеников, groups - названия их классов. Необходимо сформировать список кортежей вида(tutor, group).
# Техническое задание
# Программа должна работать со списками tutors, groups любой длины.
# Длина результирующего списка не должна быть больше длины списка tutors.
# Если в списке groups меньше элементов, чем в списке tutors, необходимо вывести последние кортежи в виде: ( < tutor > , None), например: ('Станислав', None)
# Если в списке tutors меньше элементов, чем в списке groups, то смотри пункт 2.
# Вы можете использовать в этом задании функции zip и zip_longest, но лучше обойтись без них
# Не меняйте исходные списки tutors и groups и не создавайте промежуточных списков. Только список результат.
# Подтвердите работоспособность(выведите в консоль результаты) для обоих вариантов: groups меньше tutors и tutors меньше groups.
# Сделайте сначала задание через циклы обычным образом, затем оформите решение в "одну строку" в виде comprehensions


# Примеры/Тесты:
tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
groups = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б']


# Результат, где учеников меньше
tutors1 = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий']
groups1 = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
# Список:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ('Петр', '9Б')
# ('Сергей', '9В')
# ('Дмитрий', '8Б')


# Результат, где учеников больше
tutors2 = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
groups2 = ['9А', '7В', '9Б', '9В']
# Список:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ('Петр', '9Б')
# ('Сергей', '9В')
# ('Дмитрий', None)
# ('Борис', None)
# ('Елена', None)


def get_pairs(tutor: list, group: list) -> list:
    result = []
    for i in range(len(tutor)):
        if i < len(group):
            pair = (tutor[i], group[i])
        else:
            pair = (tutor[i], None)
        result.append(pair)
    return result


def get_pairs_comp(tutor: list, group: list) -> list:
    return [(tutor[i], group[i]) if i < len(group) else (tutor[i], None) for i in range(len(tutor))]


print(get_pairs(tutors, groups))
print(get_pairs(tutors1, groups1))
print(get_pairs(tutors2, groups2))


print(get_pairs_comp(tutors, groups))
print(get_pairs_comp(tutors1, groups1))
print(get_pairs_comp(tutors2, groups2))
